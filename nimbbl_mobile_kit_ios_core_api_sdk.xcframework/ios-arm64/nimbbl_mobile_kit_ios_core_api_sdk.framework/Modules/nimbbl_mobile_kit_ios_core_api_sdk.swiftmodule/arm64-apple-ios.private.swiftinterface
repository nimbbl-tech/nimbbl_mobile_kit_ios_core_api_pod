// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name nimbbl_mobile_kit_ios_core_api_sdk
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CommonCrypto
import Foundation
import Network
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@_hasMissingDesignatedInitializers public class NetworkHelper {
  public static let shared: nimbbl_mobile_kit_ios_core_api_sdk.NetworkHelper
  public func getApiClient(isAuth: Swift.Bool, token: Swift.String) -> Foundation.URLSessionConfiguration
  public func makeRequest(url: Swift.String, method: Swift.String = "GET", body: Foundation.Data? = nil, isAuth: Swift.Bool = false, token: Swift.String = "", completion: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public struct UPIAppDetailsResponse : Swift.Codable {
  public let ios: [nimbbl_mobile_kit_ios_core_api_sdk.UPIAppsVO]?
  public let android: [nimbbl_mobile_kit_ios_core_api_sdk.UPIAppsVO]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventConstants {
  public static let SDK_INITIALIZED: Swift.String
  public static let SDK_CLEANUP: Swift.String
  public static let CHECKOUT_INITIATED: Swift.String
  public static let UPDATE_ORDER_PAYLOAD: Swift.String
  public static let WEBVIEW_LAUNCH: Swift.String
  public static let WEBVIEW_LOADED: Swift.String
  public static let WEBVIEW_FAILED: Swift.String
  public static let BACK_BUTTON_PRESSED: Swift.String
  public static let REDIRECT_URL_HIT: Swift.String
  public static let URL_INTERCEPTED: Swift.String
  public static let EXCEPTION_THROWN: Swift.String
  public static let UPI_APPS_LISTED: Swift.String
  public static let UPI_INTENT_STARTED: Swift.String
  public static let UPI_INTENT_CLOSED: Swift.String
  public static let PAYMENT_SUCCESS: Swift.String
  public static let PAYMENT_FAILED: Swift.String
  public static let PAYMENT_STATUS_SUCCESS: Swift.String
  public static let PAYMENT_STATUS_FAILED: Swift.String
}
public struct APIUtils {
  public static var nimbblTechUrl: Swift.String {
    get
    set
  }
  public static var shopUrl: Swift.String {
    get
  }
  public static var webViewViewUrl: Swift.String {
    get
  }
  public static var webViewRespCheckUrl: Swift.String {
    get
  }
  public static func getShopUrl() -> Swift.String
  @available(*, deprecated, message: "Use getShopUrl() instead")
  public static func getShopUrl(for baseUrl: Swift.String) -> Swift.String
  public static let ERROR_SWW_DOT_DOT: Swift.String
  public static let RESPONSE_QUERY_PARAM: Swift.String
}
@_hasMissingDesignatedInitializers public class LogUtil {
  public static func debugLog(tag: Swift.String, message: Swift.String)
  public static func debugLog(_ message: Swift.String)
  public static func errorLog(tag: Swift.String, message: Swift.String, error: (any Swift.Error)? = nil)
  public static func warningLog(tag: Swift.String, message: Swift.String)
  @objc deinit
}
public struct NimbblCheckoutOptions : Swift.Codable {
  public let orderToken: Swift.String?
  public let paymentModeCode: Swift.String?
  public let bankCode: Swift.String?
  public let walletCode: Swift.String?
  public let paymentFlow: Swift.String?
  public init(orderToken: Swift.String?, paymentModeCode: Swift.String?, bankCode: Swift.String?, walletCode: Swift.String?, paymentFlow: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EventLoggingService {
  public static let shared: nimbbl_mobile_kit_ios_core_api_sdk.EventLoggingService
  public func logEvent(eventName: Swift.String, orderId: Swift.String? = nil, token: Swift.String? = nil, subMerchantId: Swift.String? = nil, additionalData: [Swift.String : Any]? = nil, customUserAgent: Swift.String? = nil, customDeviceInfo: [Swift.String : Swift.String]? = nil, customAppInfo: [Swift.String : Swift.String]? = nil)
  @objc deinit
}
public struct APIConstants {
  public static var BASE_URL: Swift.String
  public static let WEB_VIEW_RESP_CHECK_URL: Swift.String
  public static var FINGERPRINT: Swift.String
  public static var DEVICE_FINGERPRINT: Swift.String
  public static let checkoutCancelUrl: Swift.String
  public static let transactionEnquiryUrl: Swift.String
  public static let updateOrderUrl: Swift.String
  public static let checkoutDetailUrl: Swift.String
  public static let upiAppDetailsUrl: Swift.String
  public static let EVENT_LOG_URL_QA: Swift.String
  public static let EVENT_LOG_URL_PP: Swift.String
  public static let EVENT_LOG_URL_PROD: Swift.String
  public static let TENANT_ID_QA: Swift.String
  public static let TENANT_ID_PP: Swift.String
  public static let TENANT_ID_PROD: Swift.String
  public static func getEventLogUrl() -> Swift.String
  public static func getDefaultTenantId() -> Swift.String
}
public struct CheckoutDetailResponse : Swift.Codable {
  public let subMerchantId: Swift.String?
  public let displayName: Swift.String?
  public let logoFileUrl: Swift.String?
  public let description: Swift.String?
  public let icaAllowed: Swift.Bool?
  public let mcaAllowed: Swift.Bool?
  public let checkoutBackgroundColor: Swift.String?
  public let checkoutTextColor: Swift.String?
  public let fastPaymentEnabled: Swift.Bool?
  public let otherPaymentEnabled: Swift.Bool?
  public let continueBtnIsWhite: Swift.Bool?
  public let orderSummaryEnabled: Swift.Bool?
  public let paymentExperience: Swift.String?
  public let checkoutSessionDuration: Swift.Double?
  public let changeUserAllowed: Swift.Bool?
  public let enableDesktopView: Swift.Bool?
  public let tokenizationEnabled: Swift.Bool?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case subMerchantId
    case displayName
    case logoFileUrl
    case description
    case icaAllowed
    case mcaAllowed
    case checkoutBackgroundColor
    case checkoutTextColor
    case fastPaymentEnabled
    case otherPaymentEnabled
    case continueBtnIsWhite
    case orderSummaryEnabled
    case paymentExperience
    case checkoutSessionDuration
    case changeUserAllowed
    case enableDesktopView
    case tokenizationEnabled
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EventLoggingUtils {
  public static func safeLogEvent(eventName: Swift.String, orderId: Swift.String? = nil, token: Swift.String? = nil, subMerchantId: Swift.String? = nil, additionalData: [Swift.String : Any]? = nil, sdkVersion: Swift.String)
  public static func safeLogEvent(eventName: Swift.String, orderId: Swift.String? = nil, token: Swift.String? = nil, subMerchantId: Swift.String? = nil, additionalData: [Swift.String : Any]? = nil, customTag: Swift.String, sdkVersion: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NimbblCoreApiSDK : ObjectiveC.NSObject {
  public static let shared: nimbbl_mobile_kit_ios_core_api_sdk.NimbblCoreApiSDK
  public func updateCheckOutCancelReason(token: Swift.String, orderId: Swift.String, cancelReason: Swift.String, completion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  public func updateOrderDetails(token: Swift.String, orderId: Swift.String, callbackMode: Swift.String, referrerPlatform: Swift.String, referrerPlatformVersion: Swift.String, completion: @escaping (Swift.Result<nimbbl_mobile_kit_ios_core_api_sdk.OrderResponse, any Swift.Error>) -> Swift.Void)
  public func getTransactionEnquiry(token: Swift.String, orderId: Swift.String, invoiceId: Swift.String, transactionId: Swift.String, completion: @escaping (Swift.Result<nimbbl_mobile_kit_ios_core_api_sdk.TransactionEnquiryResponse, any Swift.Error>) -> Swift.Void)
  public func getCheckoutDetails(token: Swift.String, completion: @escaping (Swift.Result<nimbbl_mobile_kit_ios_core_api_sdk.CheckoutDetailResponse, any Swift.Error>) -> Swift.Void)
  public func getUPIAppDetails(token: Swift.String, platform: Swift.String = "ios", completion: @escaping (Swift.Result<nimbbl_mobile_kit_ios_core_api_sdk.UPIAppDetailsResponse, any Swift.Error>) -> Swift.Void)
  public func createOrder(amount: Swift.Double, currency: Swift.String, orderLineItems: [[Swift.String : Any]], user: [Swift.String : Any]? = nil, completion: @escaping (Swift.Result<nimbbl_mobile_kit_ios_core_api_sdk.OrderResponse, any Swift.Error>) -> Swift.Void)
  public func createShopOrder(currency: Swift.String, amount: Swift.String, productId: Swift.String, orderLineItems: Swift.Bool, checkoutExperience: Swift.String, paymentMode: Swift.String, subPaymentMode: Swift.String, user: [Swift.String : Any]?, completion: @escaping (Swift.Result<[Swift.String : Any], any Swift.Error>) -> Swift.Void)
  public func createShopOrderFlutter(currency: Swift.String, amount: Swift.String, productId: Swift.String, orderLineItems: Swift.Bool, checkoutExperience: Swift.String, paymentMode: Swift.String, subPaymentMode: Swift.String, userEmail: Swift.String, userName: Swift.String, userMobileNumber: Swift.String, completion: @escaping (Swift.Result<[Swift.String : Any], any Swift.Error>) -> Swift.Void)
  public func logEvent(eventName: Swift.String, orderId: Swift.String? = nil, token: Swift.String? = nil, subMerchantId: Swift.String? = nil, additionalData: [Swift.String : Any]? = nil, customUserAgent: Swift.String? = nil, customDeviceInfo: [Swift.String : Swift.String]? = nil, customAppInfo: [Swift.String : Swift.String]? = nil)
  @objc deinit
}
@objc extension nimbbl_mobile_kit_ios_core_api_sdk.NimbblCoreApiSDK {
  @objc dynamic public func updateCheckOutCancelReasonObjC(token: Foundation.NSString, orderId: Foundation.NSString, cancelReason: Foundation.NSString, completion: @escaping (Foundation.NSDictionary?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func updateOrderDetailsObjC(token: Foundation.NSString, orderId: Foundation.NSString, callbackMode: Foundation.NSString, referrerPlatform: Foundation.NSString, referrerPlatformVersion: Foundation.NSString, completion: @escaping (Foundation.NSDictionary?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func getTransactionEnquiryObjC(token: Foundation.NSString, orderId: Foundation.NSString, invoiceId: Foundation.NSString, transactionId: Foundation.NSString, completion: @escaping (Foundation.NSDictionary?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func getCheckoutDetailsObjC(token: Foundation.NSString, completion: @escaping (Foundation.NSDictionary?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func createOrderObjC(amount: Foundation.NSNumber, currency: Foundation.NSString, orderLineItems: Foundation.NSArray, user: Foundation.NSDictionary?, completion: @escaping (Foundation.NSDictionary?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func createShopOrderObjC(currency: Foundation.NSString, amount: Foundation.NSString, productId: Foundation.NSString, orderLineItems: Foundation.NSNumber, checkoutExperience: Foundation.NSString, paymentMode: Foundation.NSString, subPaymentMode: Foundation.NSString, user: Foundation.NSDictionary?, completion: @escaping (Foundation.NSDictionary?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func createShopOrderFlutterObjC(currency: Foundation.NSString, amount: Foundation.NSString, productId: Foundation.NSString, orderLineItems: Foundation.NSNumber, checkoutExperience: Foundation.NSString, paymentMode: Foundation.NSString, subPaymentMode: Foundation.NSString, userEmail: Foundation.NSString, userName: Foundation.NSString, userMobileNumber: Foundation.NSString, completion: @escaping (Foundation.NSDictionary?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func getUPIAppDetailsObjC(token: Foundation.NSString, platform: Foundation.NSString, completion: @escaping (Foundation.NSDictionary?, Foundation.NSError?) -> Swift.Void)
}
extension nimbbl_mobile_kit_ios_core_api_sdk.OrderResponse {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.User {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.OrderLineItem {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.ShippingAddress {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.Action {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.TransactionEnquiryResponse {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.Transaction {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.CheckoutDetailResponse {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.UPIAppDetailsResponse {
  public func toDictionary() -> [Swift.String : Any]
}
extension nimbbl_mobile_kit_ios_core_api_sdk.Order {
  public func toDictionary() -> [Swift.String : Any]
}
public struct OrderResponse : Swift.Codable {
  public let orderDate: Swift.String?
  public let orderId: Swift.String?
  public let status: Swift.String?
  public let invoiceId: Swift.String?
  public let user: nimbbl_mobile_kit_ios_core_api_sdk.User?
  public let attempts: Swift.Int?
  public let maxRetries: Swift.Int?
  public let currency: Swift.String?
  public let amountBeforeTax: Swift.Double?
  public let tax: Swift.Double?
  public let totalAmount: Swift.Double?
  public let orderLineItems: [nimbbl_mobile_kit_ios_core_api_sdk.OrderLineItem?]?
  public let shippingAddress: nimbbl_mobile_kit_ios_core_api_sdk.ShippingAddress?
  public let next: [nimbbl_mobile_kit_ios_core_api_sdk.Action?]?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case orderDate
    case orderId
    case status
    case invoiceId
    case user
    case attempts
    case maxRetries
    case currency
    case amountBeforeTax
    case tax
    case totalAmount
    case orderLineItems
    case shippingAddress
    case next
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct User : Swift.Codable {
  public let userId: Swift.String?
  public let mobileNumber: Swift.String?
  public let countryCode: Swift.String?
  public let email: Swift.String?
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case userId
    case mobileNumber
    case countryCode
    case email
    case firstName
    case lastName
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderLineItem : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ShippingAddress : Swift.Codable {
  public let address1: Swift.String?
  public let street: Swift.String?
  public let landmark: Swift.String?
  public let area: Swift.String?
  public let city: Swift.String?
  public let state: Swift.String?
  public let pincode: Swift.String?
  public let addressType: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case address1
    case street
    case landmark
    case area
    case city
    case state
    case pincode
    case addressType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Action : Swift.Codable {
  public let action: Swift.String?
  public let url: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UPIAppsVO : Swift.Codable {
  public let upiAppName: Swift.String?
  public let scheme: Swift.String?
  public let packageName: Swift.String?
  public let upiAppCode: Swift.String?
  public let logoUrl: Swift.String?
  public let appBaseUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension nimbbl_mobile_kit_ios_core_api_sdk.UPIAppsVO {
  public func toDictionary() -> [Swift.String : Any]
}
public struct UPIAppsResponse : Swift.Codable {
  public let upiApps: [nimbbl_mobile_kit_ios_core_api_sdk.UPIAppsVO]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Utils {
}
@_hasMissingDesignatedInitializers public class NimbblUPIAppDetector {
  public static func getUPIAppsFromAPIAndDevice(token: Swift.String, completion: @escaping (Swift.Result<nimbbl_mobile_kit_ios_core_api_sdk.UPIAppsResponse, any Swift.Error>) -> Swift.Void)
  public static func getInstalledUPIApps(token: Swift.String, completion: @escaping (Swift.Result<nimbbl_mobile_kit_ios_core_api_sdk.UPIAppsResponse, any Swift.Error>) -> Swift.Void)
  public static func getUPIAppsList(token: Swift.String, completion: @escaping (Swift.Result<[nimbbl_mobile_kit_ios_core_api_sdk.UPIAppsVO], any Swift.Error>) -> Swift.Void)
  public static func isUPIAppReturnURL(_ url: Swift.String) -> Swift.Bool
  @objc deinit
}
public struct TransactionEnquiryResponse : Swift.Codable {
  public let transactions: [nimbbl_mobile_kit_ios_core_api_sdk.Transaction]?
  public let order: nimbbl_mobile_kit_ios_core_api_sdk.Order?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case transactions
    case order
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Transaction : Swift.Codable {
  public let nimbblTransactionId: Swift.String?
  public let transactionType: Swift.String?
  public let paymentStatus: Swift.String?
  public let nimbblSignature: Swift.String?
  public let message: Swift.String?
  public let paymentPartner: Swift.String?
  public let pspTransactionId: Swift.String?
  public let completionTime: Swift.Int?
  public let transactionAmount: Swift.Double?
  public let transactionCurrency: Swift.String?
  public let additionalCharges: Swift.Double?
  public let offerDiscount: Swift.Double?
  public let offerId: Swift.String?
  public let signatureVersion: Swift.String?
  public let processingPaymentPartner: Swift.String?
  public let paymentAcquirer: Swift.String?
  public let paymentArn: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case nimbblTransactionId
    case transactionType
    case paymentStatus
    case nimbblSignature
    case message
    case paymentPartner
    case pspTransactionId
    case completionTime
    case transactionAmount
    case transactionCurrency
    case additionalCharges
    case offerDiscount
    case offerId
    case signatureVersion
    case processingPaymentPartner
    case paymentAcquirer
    case paymentArn
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Order : Swift.Codable {
  public let nimbblOrderId: Swift.String?
  public let invoiceId: Swift.String?
  public let status: Swift.String?
  public let customAttributes: [nimbbl_mobile_kit_ios_core_api_sdk.AnyCodable]?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case nimbblOrderId
    case invoiceId
    case status
    case customAttributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init(_ value: Any)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct NimbblErrorResponse : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String
  public let errors: [nimbbl_mobile_kit_ios_core_api_sdk.NimbblError]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NimbblError : Swift.Codable {
  public let field: Swift.String?
  public let message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension nimbbl_mobile_kit_ios_core_api_sdk.CheckoutDetailResponse.CodingKeys : Swift.Equatable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.CheckoutDetailResponse.CodingKeys : Swift.Hashable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.CheckoutDetailResponse.CodingKeys : Swift.RawRepresentable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.OrderResponse.CodingKeys : Swift.Equatable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.OrderResponse.CodingKeys : Swift.Hashable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.OrderResponse.CodingKeys : Swift.RawRepresentable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.User.CodingKeys : Swift.Equatable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.User.CodingKeys : Swift.Hashable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.User.CodingKeys : Swift.RawRepresentable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.ShippingAddress.CodingKeys : Swift.Equatable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.ShippingAddress.CodingKeys : Swift.Hashable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.ShippingAddress.CodingKeys : Swift.RawRepresentable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.TransactionEnquiryResponse.CodingKeys : Swift.Equatable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.TransactionEnquiryResponse.CodingKeys : Swift.Hashable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.TransactionEnquiryResponse.CodingKeys : Swift.RawRepresentable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.Transaction.CodingKeys : Swift.Equatable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.Transaction.CodingKeys : Swift.Hashable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.Transaction.CodingKeys : Swift.RawRepresentable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.Order.CodingKeys : Swift.Equatable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.Order.CodingKeys : Swift.Hashable {}
extension nimbbl_mobile_kit_ios_core_api_sdk.Order.CodingKeys : Swift.RawRepresentable {}
